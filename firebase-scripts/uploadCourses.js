import admin from 'firebase-admin';
import { coursesData, languageMeta } from '../src/data/coursesData.js';
import { readFile } from 'fs/promises';
import { dirname, join } from 'path';
import { fileURLToPath } from 'url';

// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
const __dirname = dirname(fileURLToPath(import.meta.url));

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
const serviceAccountPath = join(__dirname, 'languagegalaxy-f2369-firebase-adminsdk-fbsvc-d2757775b6.json');
const serviceAccount = JSON.parse(await readFile(serviceAccountPath));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
admin.initializeApp({
  credential: admin.credential.cert(serviceAccount)
});

const db = admin.firestore();

async function uploadCourses() {
  try {
    const batch = db.batch(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º batch –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
    const coursesCollection = db.collection('courses');

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    const snapshot = await coursesCollection.get();
    const deletePromises = snapshot.docs.map(doc => doc.ref.delete());
    await Promise.all(deletePromises);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –∫—É—Ä—Å—ã
    for (const [languageCode, coursesArray] of Object.entries(coursesData)) {
      const languageDocRef = coursesCollection.doc(languageCode);
      const meta = languageMeta[languageCode] || {};
      
      const languageData = {
        languageName: meta.languageName || languageCode.toUpperCase(), // –ò–º—è —è–∑—ã–∫–∞
        intro: meta.intro || null,
        courses: {},
        createdAt: admin.firestore.FieldValue.serverTimestamp()
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –∫—É—Ä—Å
      for (const course of coursesArray) {
        const courseSlug = course.slug;
        languageData.courses[courseSlug] = {
          ...course,
          levelOrder: course.levelOrder || 0,
          language: languageCode,
          createdAt: admin.firestore.FieldValue.serverTimestamp()
        };
      }

      batch.set(languageDocRef, languageData);
      console.log(`‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –∫—É—Ä—Å: ${languageCode}`);
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º batch –∑–∞–ø–∏—Å—å
    await batch.commit();
    console.log('üî• –í—Å–µ –∫—É—Ä—Å—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ Firestore!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É—Ä—Å–æ–≤:', error);
  } finally {
    process.exit(0);
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —è–∑—ã–∫–∞
function getLanguageName(code) {
  const names = {
    en: 'English',
    uk: 'Ukrainian',
    // –¥–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
  };
  return names[code] || code;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
await uploadCourses();