// migrateToFinal.cjs
const admin = require('firebase-admin');
const serviceAccount = require('../../firebase-scripts/languagegalaxy-f2369-firebase-adminsdk-fbsvc-d2757775b6.json');

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount)
});

const db = admin.firestore();

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
const OLD_COLLECTION = 'courses';
const NEW_COLLECTION = 'courses_final'; // –ù–æ–≤–∞, –ø—Ä–∞–≤–∏–ª—å–Ω–∞ –Ω–∞–∑–≤–∞ –∫–æ–ª–µ–∫—Ü—ñ—ó

function transformCourseData(course) {
  const newCourseData = {};

  const nonTranslatableFields = ['photo', 'price', 'levelOrder', 'teacherIds', 'slug', 'coverImage', 'createdAt'];
  nonTranslatableFields.forEach(field => {
    if (course[field] !== undefined) {
      newCourseData[field] = course[field];
    }
  });

  const translatableFields = ['title', 'duration', 'fullDescription', 'shortDescription'];
  translatableFields.forEach(field => {
    if (course[field]) {
      newCourseData[`${field}_ua`] = course[field];
      newCourseData[`${field}_en`] = ''; // –ü–æ—Ä–æ–∂–Ω—î –ø–æ–ª–µ –¥–ª—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ–≥–æ –ø–µ—Ä–µ–∫–ª–∞–¥—É
    }
  });

  const translatableArrays = {
    goals: 'title',
    included: 'text'
  };
  for (const arrayName in translatableArrays) {
    const fieldToTranslate = translatableArrays[arrayName];
    if (course[arrayName] && Array.isArray(course[arrayName])) {
      newCourseData[`${arrayName}_ua`] = course[arrayName];
      newCourseData[`${arrayName}_en`] = course[arrayName].map(item => ({
        ...item,
        [fieldToTranslate]: ''
      }));
    }
  }

  if (course.courseProgram && Array.isArray(course.courseProgram)) {
    newCourseData.courseProgram_ua = course.courseProgram;
    newCourseData.courseProgram_en = course.courseProgram.map(module => ({
      ...module,
      moduleTitle: '',
      lessons: module.lessons ? module.lessons.map(lesson => ({
        ...lesson,
        title: ''
      })) : []
    }));
  }
  
  if (course.intro) {
      newCourseData.intro_ua = course.intro;
      newCourseData.intro_en = {
          ...course.intro,
          alt: '',
          testButtonText: '',
          text: '',
          languageName: ''
      };
  }
  return newCourseData;
}

async function runMigration() {
  console.log(`üöÄ –ü–æ—á–∞—Ç–æ–∫ –º—ñ–≥—Ä–∞—Ü—ñ—ó –∑ "${OLD_COLLECTION}" —É –Ω–æ–≤—É, –ø—Ä–æ—Å—Ç—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É "${NEW_COLLECTION}"...`);

  try {
    const oldLangDocsSnapshot = await db.collection(OLD_COLLECTION).get();
    let totalCoursesMigrated = 0;

    for (const oldLangDoc of oldLangDocsSnapshot.docs) {
      const langId = oldLangDoc.id;
      const oldData = oldLangDoc.data();
      const coursesMap = oldData.courses;
      
      console.log(`\n- –ß–∏—Ç–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ [${langId.toUpperCase()}]`);

      if (!coursesMap) {
        console.log(`  ü§∑‚Äç‚ôÇÔ∏è –ü–æ–ª–µ "courses" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ.`);
        continue;
      }
      
      for (const courseSlug in coursesMap) {
        const courseData = coursesMap[courseSlug];
        
        if (!courseData.slug) {
            console.warn(`  ‚ö†Ô∏è –£ –∫—É—Ä—Å—ñ –∑ –∫–ª—é—á–µ–º "${courseSlug}" –≤—ñ–¥—Å—É—Ç–Ω—î –ø–æ–ª–µ "slug". –¶–µ –∫—Ä–∏—Ç–∏—á–Ω–æ! –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –π–æ–≥–æ.`);
            continue;
        }

        console.log(`  - –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—è –∫—É—Ä—Å—É: ${courseData.title}`);

        const transformedData = transformCourseData(courseData);

        // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –≤–µ—Ä—Ö–Ω—å–æ–º—É —Ä—ñ–≤–Ω—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ slug —è–∫ ID
        const newDocRef = db.collection(NEW_COLLECTION).doc(courseData.slug);
        await newDocRef.set(transformedData);
        
        totalCoursesMigrated++;
      }
    }

    console.log(`\n\nüéâ –ú—ñ–≥—Ä–∞—Ü—ñ—é —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`);
    console.log(`‚úÖ –í—Å—å–æ–≥–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ —ñ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∫—É—Ä—Å—ñ–≤: ${totalCoursesMigrated}.`);
    console.log(`–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–æ–≤—É –∫–æ–ª–µ–∫—Ü—ñ—é "${NEW_COLLECTION}" —É –∫–æ–Ω—Å–æ–ª—ñ Firebase.`);

  } catch (error) {
    console.error('üî• –°—Ç–∞–ª–∞—Å—è –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –º—ñ–≥—Ä–∞—Ü—ñ—ó:', error);
  }
}

runMigration();